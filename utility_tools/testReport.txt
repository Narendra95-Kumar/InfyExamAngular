{"numFailedTestSuites":5,"numFailedTests":37,"numPassedTestSuites":0,"numPassedTests":5,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":5,"numTotalTests":42,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1709948947912,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Buffet Name field which is empty"],"failureMessages":["Error: expect(received).toBeFalsy()\n\nReceived: true\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:57:34)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Buffet Name field which is empty Testing BuffetBookingComponent - Buffet_Booking:Buffet Name validation fails for no input","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Buffet Name validation fails for no input"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Buffet Name field which is empty"],"failureMessages":["TypeError: Cannot read property 'required' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:61:23)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Buffet Name field which is empty Testing BuffetBookingComponent - Buffet_Booking:Buffet Name should verify required field","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Buffet Name should verify required field"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Buffet Name field when correct value is given"],"failureMessages":[],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Buffet Name field when correct value is given Testing BuffetBookingComponent - Buffet_Booking:Buffet Name validation passes for valid input ","location":null,"status":"passed","title":"Testing BuffetBookingComponent - Buffet_Booking:Buffet Name validation passes for valid input "},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Buffet Name field when correct value is given"],"failureMessages":[],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Buffet Name field when correct value is given Testing BuffetBookingComponent - Buffet_Booking:Buffet Name error message is not displayed for valid input ","location":null,"status":"passed","title":"Testing BuffetBookingComponent - Buffet_Booking:Buffet Name error message is not displayed for valid input "},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Validate if the options used are as provided"],"failureMessages":["TypeError: Cannot read property 'children' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:101:73)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Validate if the options used are as provided Testing BuffetBookingComponent - Buffet_Booking:Checks for the options in Select tag","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Checks for the options in Select tag"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Email id when value is not given"],"failureMessages":["Error: expect(received).toBeFalsy()\n\nReceived: true\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:144:31)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Email id when value is not given Testing BuffetBookingComponent - Buffet_Booking:Email id should fail for invalid input","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Email id should fail for invalid input"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Email id when value is not given"],"failureMessages":["TypeError: Cannot read property 'required' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:148:23)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Email id when value is not given Testing BuffetBookingComponent - Buffet_Booking:Email Id validates for required field","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Email Id validates for required field"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Email id field when correct value is given"],"failureMessages":[],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Email id field when correct value is given Testing BuffetBookingComponent - Buffet_Booking:Email id passes for valid input","location":null,"status":"passed","title":"Testing BuffetBookingComponent - Buffet_Booking:Email id passes for valid input"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Email id field when correct value is given"],"failureMessages":[],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Email id field when correct value is given Testing BuffetBookingComponent - Buffet_Booking:Email id should not contain error for valid input","location":null,"status":"passed","title":"Testing BuffetBookingComponent - Buffet_Booking:Email id should not contain error for valid input"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Email id field when correct value is given"],"failureMessages":["TypeError: Cannot read property 'attributes' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:192:26)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Email id field when correct value is given Testing BuffetBookingComponent - Buffet_Booking:Email id should be of type email","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Email id should be of type email"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Email id field when incorrect value is given"],"failureMessages":["Error: expect(received).toBeFalsy()\n\nReceived: true\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:211:31)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Email id field when incorrect value is given Testing BuffetBookingComponent - Buffet_Booking:Email id validation fails for incorrect input","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Email id validation fails for incorrect input"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Email id field when incorrect value is given"],"failureMessages":["Error: expect(received).toBeTruthy()\n\nReceived: null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:216:24)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Email id field when incorrect value is given Testing BuffetBookingComponent - Buffet_Booking:Email id validation fails","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Email id validation fails"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Email id field when incorrect value is given"],"failureMessages":["TypeError: Cannot read property 'email' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:221:23)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Email id field when incorrect value is given Testing BuffetBookingComponent - Buffet_Booking:Email id should be of type email","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Email id should be of type email"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","plateCount field with no input"],"failureMessages":["Error: expect(received).toBeFalsy()\n\nReceived: true\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:243:34)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm plateCount field with no input Testing BuffetBookingComponent - Buffet_Booking:Plate count should fail for empty input","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Plate count should fail for empty input"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","plateCount field with no input"],"failureMessages":["TypeError: Cannot read property 'required' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:248:23)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm plateCount field with no input Testing BuffetBookingComponent - Buffet_Booking:Plate count should contain required error","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Plate count should contain required error"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Plate count field when incorrect value is given"],"failureMessages":["Error: expect(received).toBeFalsy()\n\nReceived: true\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:273:34)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Plate count field when incorrect value is given Testing BuffetBookingComponent - Buffet_Booking:Plate count with invalid value","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Plate count with invalid value"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","Plate count field when incorrect value is given"],"failureMessages":["TypeError: Cannot read property 'min' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:277:23)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm Plate count field when incorrect value is given Testing BuffetBookingComponent - Buffet_Booking:Plate Count fails wrt min property","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Plate Count fails wrt min property"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","No value provided for Booked on field"],"failureMessages":["Error: expect(received).toBeFalsy()\n\nReceived: true\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:302:32)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm No value provided for Booked on field Testing BuffetBookingComponent - Buffet_Booking:Booked on validation fails for invalid input","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Booked on validation fails for invalid input"},{"ancestorTitles":["Testing BuffetBookingComponent","Verifying the fields in buffetBookingForm","No value provided for Booked on field"],"failureMessages":["TypeError: Cannot read property 'required' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:306:23)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Verifying the fields in buffetBookingForm No value provided for Booked on field Testing BuffetBookingComponent - Buffet_Booking:Booked on should contain required validation","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Booked on should contain required validation"},{"ancestorTitles":["Testing BuffetBookingComponent","Submiting invalid data"],"failureMessages":["TypeError: Cannot read property 'nativeElement' of null\n    at beforeEach (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:328:63)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestLifecycle (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:53:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)","Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: false\nReceived: true\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:332:49)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Submiting invalid data Testing BuffetBookingComponent - Buffet_Booking:Form level validation should be invalid","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Form level validation should be invalid"},{"ancestorTitles":["Testing BuffetBookingComponent","Submiting invalid data"],"failureMessages":["TypeError: Cannot read property 'nativeElement' of null\n    at beforeEach (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:328:63)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestLifecycle (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:53:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)","TypeError: Cannot read property 'disabled' of undefined\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:336:24)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Submiting invalid data Testing BuffetBookingComponent - Buffet_Booking:Submit button should have disabled property","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Submit button should have disabled property"},{"ancestorTitles":["Testing BuffetBookingComponent","Checking HTML form elements binding"],"failureMessages":["TypeError: Cannot read property 'attributes' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:359:35)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Checking HTML form elements binding Testing BuffetBookingComponent - Buffet_Booking:check binding of formgroup to form tag","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:check binding of formgroup to form tag"},{"ancestorTitles":["Testing BuffetBookingComponent","Checking HTML form elements binding"],"failureMessages":["TypeError: Cannot read property 'attributes' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:363:28)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Checking HTML form elements binding Testing BuffetBookingComponent - Buffet_Booking:check buffetName tag is binded correctly","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:check buffetName tag is binded correctly"},{"ancestorTitles":["Testing BuffetBookingComponent","Checking HTML form elements binding"],"failureMessages":["TypeError: Cannot read property 'attributes' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:367:25)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Checking HTML form elements binding Testing BuffetBookingComponent - Buffet_Booking:check emailId tag is binded correctly","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:check emailId tag is binded correctly"},{"ancestorTitles":["Testing BuffetBookingComponent","Checking HTML form elements binding"],"failureMessages":["TypeError: Cannot read property 'attributes' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:371:28)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Checking HTML form elements binding Testing BuffetBookingComponent - Buffet_Booking:check plateCount tag is binded correctly","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:check plateCount tag is binded correctly"},{"ancestorTitles":["Testing BuffetBookingComponent","Checking HTML form elements binding"],"failureMessages":["TypeError: Cannot read property 'attributes' of null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:375:26)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Checking HTML form elements binding Testing BuffetBookingComponent - Buffet_Booking:check bookedOn tag is binded correctly","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:check bookedOn tag is binded correctly"},{"ancestorTitles":["Testing BuffetBookingComponent","Submitting valid data"],"failureMessages":["Error: expect(spy).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:393:19)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Submitting valid data Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method calls service","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method calls service"},{"ancestorTitles":["Testing BuffetBookingComponent","Submitting valid data"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: null\nReceived: undefined\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:399:38)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Submitting valid data Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method nullifies the messages","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method nullifies the messages"},{"ancestorTitles":["Testing BuffetBookingComponent","Submitting valid data"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: null\nReceived: undefined\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:404:40)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Submitting valid data Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method nullifies the messages","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method nullifies the messages"},{"ancestorTitles":["Testing BuffetBookingComponent","Submitting valid data"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Success message is populated\"\nReceived: undefined\n    at testing_1.fakeAsync (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:411:40)\n    at /home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/fake-async-test.js:585:34\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Submitting valid data Testing BuffetBookingComponent - Buffet_Booking:On calling service, success message must be populated","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:On calling service, success message must be populated"},{"ancestorTitles":["Testing BuffetBookingComponent","Submitting valid data"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Failure message is populated\"\nReceived: undefined\n    at testing_1.fakeAsync (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts:419:38)\n    at /home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/fake-async-test.js:585:34\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing BuffetBookingComponent Submitting valid data Testing BuffetBookingComponent - Buffet_Booking:Buffet_Booking:On calling service, error message must be populated","location":null,"status":"failed","title":"Testing BuffetBookingComponent - Buffet_Booking:Buffet_Booking:On calling service, error message must be populated"}],"endTime":1709948952103,"message":"  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Buffet Name field which is empty › Testing BuffetBookingComponent - Buffet_Booking:Buffet Name validation fails for no input\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      55 | \n      56 |       it('Testing BuffetBookingComponent - Buffet_Booking:Buffet Name validation fails for no input', () => {\n    > 57 |         expect(buffetName.valid).toBeFalsy();\n         |                                  ^\n      58 |       });\n      59 | \n      60 |       it('Testing BuffetBookingComponent - Buffet_Booking:Buffet Name should verify required field', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:57:34)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Buffet Name field which is empty › Testing BuffetBookingComponent - Buffet_Booking:Buffet Name should verify required field\n\n    TypeError: Cannot read property 'required' of null\n\n      59 | \n      60 |       it('Testing BuffetBookingComponent - Buffet_Booking:Buffet Name should verify required field', () => {\n    > 61 |         expect(errors.required).toBeTruthy();\n         |                       ^\n      62 | \n      63 |       });\n      64 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:61:23)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Validate if the options used are as provided › Testing BuffetBookingComponent - Buffet_Booking:Checks for the options in Select tag\n\n    TypeError: Cannot read property 'children' of null\n\n       99 |       it('Testing BuffetBookingComponent - Buffet_Booking:Checks for the options in Select tag', () => {\n      100 |         const buffetNameDisabledOptionTag = fixture.debugElement.query(By.css('#buffetName'));\n    > 101 |         const optionArray: DebugElement[] = buffetNameDisabledOptionTag.children;\n          |                                                                         ^\n      102 |         let flag = 0;\n      103 | \n      104 |         for (const element of optionArray) {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:101:73)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Email id when value is not given › Testing BuffetBookingComponent - Buffet_Booking:Email id should fail for invalid input\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      142 | \n      143 |       it('Testing BuffetBookingComponent - Buffet_Booking:Email id should fail for invalid input', () => {\n    > 144 |         expect(emailId.valid).toBeFalsy();\n          |                               ^\n      145 |       });\n      146 | \n      147 |       it('Testing BuffetBookingComponent - Buffet_Booking:Email Id validates for required field', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:144:31)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Email id when value is not given › Testing BuffetBookingComponent - Buffet_Booking:Email Id validates for required field\n\n    TypeError: Cannot read property 'required' of null\n\n      146 | \n      147 |       it('Testing BuffetBookingComponent - Buffet_Booking:Email Id validates for required field', () => {\n    > 148 |         expect(errors.required).toBeTruthy();\n          |                       ^\n      149 | \n      150 |       });\n      151 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:148:23)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Email id field when correct value is given › Testing BuffetBookingComponent - Buffet_Booking:Email id should be of type email\n\n    TypeError: Cannot read property 'attributes' of null\n\n      190 |       it('Testing BuffetBookingComponent - Buffet_Booking:Email id should be of type email', () => {\n      191 |         const emailType = fixture.debugElement.query(By.css('#emailId'));\n    > 192 |         expect(emailType.attributes.type).toBe('email');\n          |                          ^\n      193 |       });\n      194 |     });\n      195 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:192:26)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Email id field when incorrect value is given › Testing BuffetBookingComponent - Buffet_Booking:Email id validation fails for incorrect input\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      209 | \n      210 |       it('Testing BuffetBookingComponent - Buffet_Booking:Email id validation fails for incorrect input', () => {\n    > 211 |         expect(emailId.valid).toBeFalsy();\n          |                               ^\n      212 | \n      213 |       });\n      214 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:211:31)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Email id field when incorrect value is given › Testing BuffetBookingComponent - Buffet_Booking:Email id validation fails\n\n    expect(received).toBeTruthy()\n\n    Received: null\n\n      214 | \n      215 |       it('Testing BuffetBookingComponent - Buffet_Booking:Email id validation fails', () => {\n    > 216 |         expect(errors).toBeTruthy();\n          |                        ^\n      217 | \n      218 |       });\n      219 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:216:24)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Email id field when incorrect value is given › Testing BuffetBookingComponent - Buffet_Booking:Email id should be of type email\n\n    TypeError: Cannot read property 'email' of null\n\n      219 | \n      220 |       it('Testing BuffetBookingComponent - Buffet_Booking:Email id should be of type email', () => {\n    > 221 |         expect(errors.email).toBeTruthy();\n          |                       ^\n      222 |       });\n      223 |     });\n      224 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:221:23)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › plateCount field with no input › Testing BuffetBookingComponent - Buffet_Booking:Plate count should fail for empty input\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      241 | \n      242 |       it('Testing BuffetBookingComponent - Buffet_Booking:Plate count should fail for empty input', () => {\n    > 243 |         expect(plateCount.valid).toBeFalsy();\n          |                                  ^\n      244 |       });\n      245 | \n      246 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:243:34)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › plateCount field with no input › Testing BuffetBookingComponent - Buffet_Booking:Plate count should contain required error\n\n    TypeError: Cannot read property 'required' of null\n\n      246 | \n      247 |       it('Testing BuffetBookingComponent - Buffet_Booking:Plate count should contain required error', () => {\n    > 248 |         expect(errors.required).toBeTruthy();\n          |                       ^\n      249 | \n      250 |       });\n      251 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:248:23)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Plate count field when incorrect value is given › Testing BuffetBookingComponent - Buffet_Booking:Plate count with invalid value\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      271 | \n      272 |       it('Testing BuffetBookingComponent - Buffet_Booking:Plate count with invalid value', () => {\n    > 273 |         expect(plateCount.valid).toBeFalsy();\n          |                                  ^\n      274 |       });\n      275 | \n      276 |       it('Testing BuffetBookingComponent - Buffet_Booking:Plate Count fails wrt min property', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:273:34)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › Plate count field when incorrect value is given › Testing BuffetBookingComponent - Buffet_Booking:Plate Count fails wrt min property\n\n    TypeError: Cannot read property 'min' of null\n\n      275 | \n      276 |       it('Testing BuffetBookingComponent - Buffet_Booking:Plate Count fails wrt min property', () => {\n    > 277 |         expect(errors.min).toBeTruthy();\n          |                       ^\n      278 |       });\n      279 | \n      280 |      /* it('Testing BuffetBookingComponent - Plate Count should display error message for invalid value', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:277:23)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › No value provided for Booked on field › Testing BuffetBookingComponent - Buffet_Booking:Booked on validation fails for invalid input\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      300 | \n      301 |       it('Testing BuffetBookingComponent - Buffet_Booking:Booked on validation fails for invalid input', () => {\n    > 302 |         expect(bookedOn.valid).toBeFalsy();\n          |                                ^\n      303 |       });\n      304 | \n      305 |       it('Testing BuffetBookingComponent - Buffet_Booking:Booked on should contain required validation', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:302:32)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Verifying the fields in buffetBookingForm › No value provided for Booked on field › Testing BuffetBookingComponent - Buffet_Booking:Booked on should contain required validation\n\n    TypeError: Cannot read property 'required' of null\n\n      304 | \n      305 |       it('Testing BuffetBookingComponent - Buffet_Booking:Booked on should contain required validation', () => {\n    > 306 |         expect(errors.required).toBeTruthy();\n          |                       ^\n      307 | \n      308 |       });\n      309 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:306:23)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submiting invalid data › Testing BuffetBookingComponent - Buffet_Booking:Form level validation should be invalid\n\n    TypeError: Cannot read property 'nativeElement' of null\n\n      326 |       component.buffetBookingForm.controls.bookedOn.setValue(new Date('June 6, 2018 00:00:00'));\n      327 |       fixture.detectChanges();\n    > 328 |       submitBtn = fixture.debugElement.query(By.css('button')).nativeElement;\n          |                                                               ^\n      329 |     });\n      330 | \n      331 |     it('Testing BuffetBookingComponent - Buffet_Booking:Form level validation should be invalid', () => {\n\n      at beforeEach (src/app/test/buffet-booking.component.spec.ts:328:63)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submiting invalid data › Testing BuffetBookingComponent - Buffet_Booking:Form level validation should be invalid\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: false\n    Received: true\n\n      330 | \n      331 |     it('Testing BuffetBookingComponent - Buffet_Booking:Form level validation should be invalid', () => {\n    > 332 |       expect(component.buffetBookingForm.valid).toBe(false);\n          |                                                 ^\n      333 |     });\n      334 | \n      335 |     it('Testing BuffetBookingComponent - Buffet_Booking:Submit button should have disabled property', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:332:49)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submiting invalid data › Testing BuffetBookingComponent - Buffet_Booking:Submit button should have disabled property\n\n    TypeError: Cannot read property 'nativeElement' of null\n\n      326 |       component.buffetBookingForm.controls.bookedOn.setValue(new Date('June 6, 2018 00:00:00'));\n      327 |       fixture.detectChanges();\n    > 328 |       submitBtn = fixture.debugElement.query(By.css('button')).nativeElement;\n          |                                                               ^\n      329 |     });\n      330 | \n      331 |     it('Testing BuffetBookingComponent - Buffet_Booking:Form level validation should be invalid', () => {\n\n      at beforeEach (src/app/test/buffet-booking.component.spec.ts:328:63)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submiting invalid data › Testing BuffetBookingComponent - Buffet_Booking:Submit button should have disabled property\n\n    TypeError: Cannot read property 'disabled' of undefined\n\n      334 | \n      335 |     it('Testing BuffetBookingComponent - Buffet_Booking:Submit button should have disabled property', () => {\n    > 336 |       expect(submitBtn.disabled).toBe(true);\n          |                        ^\n      337 |     });\n      338 | \n      339 |   });\n\n      at it (src/app/test/buffet-booking.component.spec.ts:336:24)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Checking HTML form elements binding › Testing BuffetBookingComponent - Buffet_Booking:check binding of formgroup to form tag\n\n    TypeError: Cannot read property 'attributes' of null\n\n      357 | \n      358 |     it('Testing BuffetBookingComponent - Buffet_Booking:check binding of formgroup to form tag', () => {\n    > 359 |       expect(buffetBookingFormTag.attributes['ng-reflect-form']).toBeTruthy();\n          |                                   ^\n      360 |     });\n      361 | \n      362 |     it('Testing BuffetBookingComponent - Buffet_Booking:check buffetName tag is binded correctly', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:359:35)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Checking HTML form elements binding › Testing BuffetBookingComponent - Buffet_Booking:check buffetName tag is binded correctly\n\n    TypeError: Cannot read property 'attributes' of null\n\n      361 | \n      362 |     it('Testing BuffetBookingComponent - Buffet_Booking:check buffetName tag is binded correctly', () => {\n    > 363 |       expect(buffetNameTag.attributes.formControlName).toBe('buffetName');\n          |                            ^\n      364 |     });\n      365 | \n      366 |     it('Testing BuffetBookingComponent - Buffet_Booking:check emailId tag is binded correctly', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:363:28)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Checking HTML form elements binding › Testing BuffetBookingComponent - Buffet_Booking:check emailId tag is binded correctly\n\n    TypeError: Cannot read property 'attributes' of null\n\n      365 | \n      366 |     it('Testing BuffetBookingComponent - Buffet_Booking:check emailId tag is binded correctly', () => {\n    > 367 |       expect(emailIdTag.attributes.formControlName).toBe('emailId');\n          |                         ^\n      368 |     });\n      369 | \n      370 |     it('Testing BuffetBookingComponent - Buffet_Booking:check plateCount tag is binded correctly', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:367:25)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Checking HTML form elements binding › Testing BuffetBookingComponent - Buffet_Booking:check plateCount tag is binded correctly\n\n    TypeError: Cannot read property 'attributes' of null\n\n      369 | \n      370 |     it('Testing BuffetBookingComponent - Buffet_Booking:check plateCount tag is binded correctly', () => {\n    > 371 |       expect(plateCountTag.attributes.formControlName).toBe('plateCount');\n          |                            ^\n      372 |     });\n      373 | \n      374 |     it('Testing BuffetBookingComponent - Buffet_Booking:check bookedOn tag is binded correctly', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:371:28)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Checking HTML form elements binding › Testing BuffetBookingComponent - Buffet_Booking:check bookedOn tag is binded correctly\n\n    TypeError: Cannot read property 'attributes' of null\n\n      373 | \n      374 |     it('Testing BuffetBookingComponent - Buffet_Booking:check bookedOn tag is binded correctly', () => {\n    > 375 |       expect(bookedOnTag.attributes.formControlName).toBe('bookedOn');\n          |                          ^\n      376 |     });\n      377 |   });\n      378 | \n\n      at it (src/app/test/buffet-booking.component.spec.ts:375:26)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submitting valid data › Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method calls service\n\n    expect(spy).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      391 |       const spy = spyOn(buffetBookingService, 'bookBuffet').and.returnValue(of({ message: 'Success' }));\n      392 |       component.bookBuffet();\n    > 393 |       expect(spy).toHaveBeenCalled();\n          |                   ^\n      394 |     });\n      395 | \n      396 |     it('Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method nullifies the messages', () => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:393:19)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submitting valid data › Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method nullifies the messages\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: null\n    Received: undefined\n\n      397 |       spyOn(buffetBookingService, 'bookBuffet').and.returnValue(of({ message: 'Success message is populated' }));\n      398 |       component.bookBuffet();\n    > 399 |       expect(component.errorMessage).toBe(null);\n          |                                      ^\n      400 |     });\n      401 |     it('Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method nullifies the messages', () => {\n      402 |       spyOn(buffetBookingService, 'bookBuffet').and.returnValue(throwError({ error: { message: 'Failure message is populated' } }));\n\n      at it (src/app/test/buffet-booking.component.spec.ts:399:38)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submitting valid data › Testing BuffetBookingComponent - Buffet_Booking:Check if the bookBuffet method nullifies the messages\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: null\n    Received: undefined\n\n      402 |       spyOn(buffetBookingService, 'bookBuffet').and.returnValue(throwError({ error: { message: 'Failure message is populated' } }));\n      403 |       component.bookBuffet();\n    > 404 |       expect(component.successMessage).toBe(null);\n          |                                        ^\n      405 |     });\n      406 | \n      407 |     it('Testing BuffetBookingComponent - Buffet_Booking:On calling service, success message must be populated', fakeAsync(() => {\n\n      at it (src/app/test/buffet-booking.component.spec.ts:404:40)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submitting valid data › Testing BuffetBookingComponent - Buffet_Booking:On calling service, success message must be populated\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"Success message is populated\"\n    Received: undefined\n\n      409 |       component.bookBuffet();\n      410 |       tick();\n    > 411 |       expect(component.successMessage).toBe('Success message is populated');\n          |                                        ^\n      412 |     }));\n      413 | \n      414 |     it('Testing BuffetBookingComponent - Buffet_Booking:Buffet_Booking:On calling service, error message must be populated',\n\n      at testing_1.fakeAsync (src/app/test/buffet-booking.component.spec.ts:411:40)\n      at node_modules/zone.js/dist/fake-async-test.js:585:34\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing BuffetBookingComponent › Submitting valid data › Testing BuffetBookingComponent - Buffet_Booking:Buffet_Booking:On calling service, error message must be populated\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"Failure message is populated\"\n    Received: undefined\n\n      417 |       component.bookBuffet();\n      418 |       tick();\n    > 419 |       expect(component.errorMessage).toBe('Failure message is populated');\n          |                                      ^\n      420 |     }));\n      421 |   });\n      422 | \n\n      at testing_1.fakeAsync (src/app/test/buffet-booking.component.spec.ts:419:38)\n      at node_modules/zone.js/dist/fake-async-test.js:585:34\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n","name":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.component.spec.ts","startTime":1709948948491,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing GetBookingComponent"],"failureMessages":[],"fullName":"Testing GetBookingComponent Testing GetBookingComponent - Get_Booking:Should check Two-way binding of bookingId","location":null,"status":"passed","title":"Testing GetBookingComponent - Get_Booking:Should check Two-way binding of bookingId"},{"ancestorTitles":["Testing GetBookingComponent"],"failureMessages":["Error: expect(spy).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/get-booking.component.spec.ts:53:17)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing GetBookingComponent Testing GetBookingComponent - Get_Booking:Check if the getBooking() method calls service","location":null,"status":"failed","title":"Testing GetBookingComponent - Get_Booking:Check if the getBooking() method calls service"},{"ancestorTitles":["Testing GetBookingComponent","Verify the Search box in GetBooking","Submitting valid data"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 5\n+ Received  + 1\n\n- Array [\n-   \"August 15, 2018\",\n-   \"NorthIndianFestivalSpecial\",\n-   \"6\",\n- ]\n+ Array []\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/get-booking.component.spec.ts:81:24)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing GetBookingComponent Verify the Search box in GetBooking Submitting valid data Testing GetBookingComponent - Get_Booking:Should display result in tabular form","location":null,"status":"failed","title":"Testing GetBookingComponent - Get_Booking:Should display result in tabular form"},{"ancestorTitles":["Testing GetBookingComponent","Verify the Search box in GetBooking","Submitting invalid data"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: null\nReceived: undefined\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/get-booking.component.spec.ts:97:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing GetBookingComponent Verify the Search box in GetBooking Submitting invalid data Testing GetBookingComponent - Get_Booking:Check if getBooking() method nullifies selectedBooking on invalid input","location":null,"status":"failed","title":"Testing GetBookingComponent - Get_Booking:Check if getBooking() method nullifies selectedBooking on invalid input"},{"ancestorTitles":["Testing GetBookingComponent","Verify the Search box in GetBooking","Submitting invalid data"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Failure message is populated\"\nReceived: \"Error\"\n    at testing_1.fakeAsync (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/get-booking.component.spec.ts:104:40)\n    at /home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/fake-async-test.js:585:34\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing GetBookingComponent Verify the Search box in GetBooking Submitting invalid data Testing GetBookingComponent - Get_Booking:On calling service, errorMessage must be displayed for Invalid data","location":null,"status":"failed","title":"Testing GetBookingComponent - Get_Booking:On calling service, errorMessage must be displayed for Invalid data"}],"endTime":1709948953302,"message":"  ● Testing GetBookingComponent › Testing GetBookingComponent - Get_Booking:Check if the getBooking() method calls service\n\n    expect(spy).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      51 |     const spy = spyOn(getBookingService, 'getBooking').and.returnValue(of(BuffetBooking));\n      52 |     component.getBooking();\n    > 53 |     expect(spy).toHaveBeenCalled();\n         |                 ^\n      54 |   });\n      55 | \n      56 |   describe('Verify the Search box in GetBooking', () => {\n\n      at it (src/app/test/get-booking.component.spec.ts:53:17)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing GetBookingComponent › Verify the Search box in GetBooking › Submitting valid data › Testing GetBookingComponent - Get_Booking:Should display result in tabular form\n\n    expect(received).toEqual(expected) // deep equality\n\n    - Expected  - 5\n    + Received  + 1\n\n    - Array [\n    -   \"August 15, 2018\",\n    -   \"NorthIndianFestivalSpecial\",\n    -   \"6\",\n    - ]\n    + Array []\n\n      79 |           result.push(data);\n      80 |         }\n    > 81 |         expect(result).toEqual(['August 15, 2018', 'NorthIndianFestivalSpecial', '6']);\n         |                        ^\n      82 |       });\n      83 | \n      84 |     });\n\n      at it (src/app/test/get-booking.component.spec.ts:81:24)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing GetBookingComponent › Verify the Search box in GetBooking › Submitting invalid data › Testing GetBookingComponent - Get_Booking:Check if getBooking() method nullifies selectedBooking on invalid input\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: null\n    Received: undefined\n\n       95 |         spyOn(getBookingService, 'getBooking').and.returnValue(throwError({ error: { message: 'Failure message is populated' } }));\n       96 |         component.getBooking();\n    >  97 |         expect(component.selectedBooking).toBe(null);\n          |                                           ^\n       98 |       });\n       99 | \n      100 |       it('Testing GetBookingComponent - Get_Booking:On calling service, errorMessage must be displayed for Invalid data', fakeAsync(() => {\n\n      at it (src/app/test/get-booking.component.spec.ts:97:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing GetBookingComponent › Verify the Search box in GetBooking › Submitting invalid data › Testing GetBookingComponent - Get_Booking:On calling service, errorMessage must be displayed for Invalid data\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"Failure message is populated\"\n    Received: \"Error\"\n\n      102 |         component.getBooking();\n      103 |         tick();\n    > 104 |         expect(component.errorMessage).toBe('Failure message is populated');\n          |                                        ^\n      105 |       }));\n      106 |     });\n      107 | \n\n      at testing_1.fakeAsync (src/app/test/get-booking.component.spec.ts:104:40)\n      at node_modules/zone.js/dist/fake-async-test.js:585:34\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n","name":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/get-booking.component.spec.ts","startTime":1709948952160,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing AppComponent"],"failureMessages":["Error: expect(received).toBeTruthy()\n\nReceived: null\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/app.component.spec.ts:29:29)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing AppComponent Testing AppComponent - Checking presence of routerOutletTag","location":null,"status":"failed","title":"Testing AppComponent - Checking presence of routerOutletTag"}],"endTime":1709948953636,"message":"  ● Testing AppComponent › Testing AppComponent - Checking presence of routerOutletTag\n\n    expect(received).toBeTruthy()\n\n    Received: null\n\n      27 | \n      28 |   it('Testing AppComponent - Checking presence of routerOutletTag', () => { // 2. Router tag\n    > 29 |     expect(routerOutletTag).toBeTruthy();\n         |                             ^\n      30 |   });\n      31 | \n      32 | });\n\n      at it (src/app/test/app.component.spec.ts:29:29)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n","name":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/app.component.spec.ts","startTime":1709948953312,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing fetching data through BuffetBookingService"],"failureMessages":["TypeError: Cannot read property 'subscribe' of undefined\n    at testing_1.inject (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.service.spec.ts:26:25)\n    at TestBedViewEngine.Object.<anonymous>.TestBedViewEngine.execute (/home/user/Desktop/user_repo/packages/core/testing/src/test_bed.ts:499:15)\n    at /home/user/Desktop/user_repo/packages/core/testing/src/test_bed.ts:691:53\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing fetching data through BuffetBookingService Testing fetching data through BuffetBookingService - Buffet_Booking:Service should return observable","location":null,"status":"failed","title":"Testing fetching data through BuffetBookingService - Buffet_Booking:Service should return observable"},{"ancestorTitles":["Testing fetching data through BuffetBookingService"],"failureMessages":["Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"http://localhost:3000/buffetBookings\"\nReceived: \"\"\n    at it (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.service.spec.ts:35:29)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing fetching data through BuffetBookingService Testing fetching data through BuffetBookingService - Service Should call appropriate URL","location":null,"status":"failed","title":"Testing fetching data through BuffetBookingService - Service Should call appropriate URL"},{"ancestorTitles":["Testing fetching data through BuffetBookingService"],"failureMessages":["Error: expect(spy).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n    at testing_1.inject (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.service.spec.ts:42:17)\n    at TestBedViewEngine.Object.<anonymous>.TestBedViewEngine.execute (/home/user/Desktop/user_repo/packages/core/testing/src/test_bed.ts:499:15)\n    at /home/user/Desktop/user_repo/packages/core/testing/src/test_bed.ts:691:53\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing fetching data through BuffetBookingService Testing fetching data through BuffetBookingService - Buffet_Booking:Service should be called using POST method","location":null,"status":"failed","title":"Testing fetching data through BuffetBookingService - Buffet_Booking:Service should be called using POST method"}],"endTime":1709948954070,"message":"  ● Testing fetching data through BuffetBookingService › Testing fetching data through BuffetBookingService - Buffet_Booking:Service should return observable\n\n    TypeError: Cannot read property 'subscribe' of undefined\n\n      24 |   it('Testing fetching data through BuffetBookingService - Buffet_Booking:Service should return observable',\n      25 |   inject([HttpTestingController, BuffetBookingService], (httpMock1, service) => {\n    > 26 |     service.bookBuffet().subscribe((response) => {\n         |                         ^\n      27 |       expect(response).toBe('{\"buffetName\":\"ChineseSpcl\",\"bookedOn\":2018-6-14,\"emailId\":\"luvina@infy.com\",\"plateCount\":4}');\n      28 |     });\n      29 |     const mockReq = httpMock1.expectOne(dataService.url);\n\n      at testing_1.inject (src/app/test/buffet-booking.service.spec.ts:26:25)\n      at TestBedViewEngine.Object.<anonymous>.TestBedViewEngine.execute (../../packages/core/testing/src/test_bed.ts:499:15)\n      at ../../packages/core/testing/src/test_bed.ts:691:53\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing fetching data through BuffetBookingService › Testing fetching data through BuffetBookingService - Service Should call appropriate URL\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"http://localhost:3000/buffetBookings\"\n    Received: \"\"\n\n      33 | \n      34 |   it('Testing fetching data through BuffetBookingService - Service Should call appropriate URL', () => {\n    > 35 |     expect(dataService.url).toBe('http://localhost:3000/buffetBookings');\n         |                             ^\n      36 |   });\n      37 | \n      38 |   it('Testing fetching data through BuffetBookingService - Buffet_Booking:Service should be called using POST method',\n\n      at it (src/app/test/buffet-booking.service.spec.ts:35:29)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing fetching data through BuffetBookingService › Testing fetching data through BuffetBookingService - Buffet_Booking:Service should be called using POST method\n\n    expect(spy).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      40 |     const spy = spyOn(http, 'post').and.returnValue(of({ message: 'Success' }));\n      41 |     dataService.bookBuffet(mockResponse);\n    > 42 |     expect(spy).toHaveBeenCalled();\n         |                 ^\n      43 |   }));\n      44 | });\n      45 | \n\n      at testing_1.inject (src/app/test/buffet-booking.service.spec.ts:42:17)\n      at TestBedViewEngine.Object.<anonymous>.TestBedViewEngine.execute (../../packages/core/testing/src/test_bed.ts:499:15)\n      at ../../packages/core/testing/src/test_bed.ts:691:53\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n","name":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/buffet-booking.service.spec.ts","startTime":1709948953646,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing fetching data through GetBookingService"],"failureMessages":["TypeError: Cannot read property 'subscribe' of undefined\n    at testing_1.inject (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/get-booking.service.spec.ts:28:29)\n    at TestBedViewEngine.Object.<anonymous>.TestBedViewEngine.execute (/home/user/Desktop/user_repo/packages/core/testing/src/test_bed.ts:499:15)\n    at /home/user/Desktop/user_repo/packages/core/testing/src/test_bed.ts:691:53\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing fetching data through GetBookingService Testing fetching data through GetBookingService - Get_Booking:Service should return observable","location":null,"status":"failed","title":"Testing fetching data through GetBookingService - Get_Booking:Service should return observable"},{"ancestorTitles":["Testing fetching data through GetBookingService"],"failureMessages":["Error: expect(spy).toHaveBeenCalled()\n\nExpected number of calls: >= 1\nReceived number of calls:    0\n    at testing_1.inject (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/get-booking.service.spec.ts:42:17)\n    at TestBedViewEngine.Object.<anonymous>.TestBedViewEngine.execute (/home/user/Desktop/user_repo/packages/core/testing/src/test_bed.ts:499:15)\n    at /home/user/Desktop/user_repo/packages/core/testing/src/test_bed.ts:691:53\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:396:30)\n    at ProxyZoneSpec.onInvoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/proxy.js:117:43)\n    at ZoneDelegate.invoke (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:395:36)\n    at Zone.run (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/zone.js/dist/zone.js:153:47)\n    at Object.wrappedFunc (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-preset-angular/build/zone-patch/index.js:49:30)\n    at Object.asyncJestTest (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:100:37)\n    at resolve (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/home/user/Desktop/user_repo/Certification_Assessment/Frontend/node_modules/jest-jasmine2/build/queueRunner.js:73:41)"],"fullName":"Testing fetching data through GetBookingService Testing fetching data through GetBookingService - Get_Booking:Service should be called using GET method","location":null,"status":"failed","title":"Testing fetching data through GetBookingService - Get_Booking:Service should be called using GET method"}],"endTime":1709948954658,"message":"  ● Testing fetching data through GetBookingService › Testing fetching data through GetBookingService - Get_Booking:Service should return observable\n\n    TypeError: Cannot read property 'subscribe' of undefined\n\n      26 |   inject([GetBookingService, HttpTestingController], (service, httpMock1) => {\n      27 |     let data;\n    > 28 |     service.getBooking(1001).subscribe((response) => {\n         |                             ^\n      29 |       data = response;\n      30 |     });\n      31 |     const mockReq = httpMock1.expectOne('http://localhost:3000/buffetBookings/1001');\n\n      at testing_1.inject (src/app/test/get-booking.service.spec.ts:28:29)\n      at TestBedViewEngine.Object.<anonymous>.TestBedViewEngine.execute (../../packages/core/testing/src/test_bed.ts:499:15)\n      at ../../packages/core/testing/src/test_bed.ts:691:53\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n\n  ● Testing fetching data through GetBookingService › Testing fetching data through GetBookingService - Get_Booking:Service should be called using GET method\n\n    expect(spy).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n      40 |     const spy = spyOn(http, 'get');\n      41 |     dataService.getBooking(1001);\n    > 42 |     expect(spy).toHaveBeenCalled();\n         |                 ^\n      43 |   }));\n      44 | });\n      45 | \n\n      at testing_1.inject (src/app/test/get-booking.service.spec.ts:42:17)\n      at TestBedViewEngine.Object.<anonymous>.TestBedViewEngine.execute (../../packages/core/testing/src/test_bed.ts:499:15)\n      at ../../packages/core/testing/src/test_bed.ts:691:53\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:396:30)\n      at ProxyZoneSpec.onInvoke (node_modules/zone.js/dist/proxy.js:117:43)\n      at ZoneDelegate.invoke (node_modules/zone.js/dist/zone.js:395:36)\n      at Zone.run (node_modules/zone.js/dist/zone.js:153:47)\n","name":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/test/get-booking.service.spec.ts","startTime":1709948954126,"status":"failed","summary":""}],"wasInterrupted":false,"coverageMap":{"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/buffet-booking/buffet-booking.component.ts":{"path":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/buffet-booking/buffet-booking.component.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":50}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":56}},"2":{"start":{"line":10,"column":0},"end":{"line":39,"column":null}},"3":{"start":{"line":15,"column":22},"end":{"line":15,"column":26}},"4":{"start":{"line":20,"column":4},"end":{"line":25,"column":7}},"5":{"start":{"line":10,"column":13},"end":{"line":39,"column":null}},"6":{"start":{"line":10,"column":13},"end":{"line":10,"column":35}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":2},"end":{"line":15,"column":22}},"loc":{"start":{"line":15,"column":37},"end":{"line":15,"column":42}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":2},"end":{"line":18,"column":10}},"loc":{"start":{"line":18,"column":10},"end":{"line":26,"column":3}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":2},"end":{"line":29,"column":12}},"loc":{"start":{"line":29,"column":12},"end":{"line":37,"column":3}}}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":31,"4":31,"5":1,"6":1},"f":{"0":31,"1":31,"2":5},"b":{}},"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/buffet-booking/buffet-booking.service.ts":{"path":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/buffet-booking/buffet-booking.service.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":43}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"2":{"start":{"line":7,"column":0},"end":{"line":19,"column":null}},"3":{"start":{"line":10,"column":22},"end":{"line":10,"column":34}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":11}},"5":{"start":{"line":7,"column":13},"end":{"line":19,"column":null}},"6":{"start":{"line":7,"column":13},"end":{"line":7,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":2},"end":{"line":10,"column":22}},"loc":{"start":{"line":10,"column":44},"end":{"line":10,"column":49}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":12}},"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":21}}}},"branchMap":{},"s":{"0":2,"1":2,"2":2,"3":3,"4":3,"5":2,"6":2},"f":{"0":3,"1":2},"b":{}},"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/get-booking/get-booking.component.ts":{"path":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/get-booking/get-booking.component.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":50}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":58}},"2":{"start":{"line":10,"column":0},"end":{"line":32,"column":null}},"3":{"start":{"line":18,"column":22},"end":{"line":18,"column":41}},"4":{"start":{"line":10,"column":13},"end":{"line":32,"column":null}},"5":{"start":{"line":10,"column":13},"end":{"line":10,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":2},"end":{"line":18,"column":22}},"loc":{"start":{"line":18,"column":58},"end":{"line":18,"column":63}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":10}},"loc":{"start":{"line":20,"column":10},"end":{"line":21,"column":3}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":2},"end":{"line":23,"column":12}},"loc":{"start":{"line":23,"column":12},"end":{"line":30,"column":4}}}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":5,"4":1,"5":1},"f":{"0":5,"1":5,"2":3},"b":{}},"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/get-booking/get-booking.service.ts":{"path":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/get-booking/get-booking.service.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":43}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"2":{"start":{"line":10,"column":0},"end":{"line":21,"column":null}},"3":{"start":{"line":12,"column":22},"end":{"line":12,"column":28}},"4":{"start":{"line":10,"column":13},"end":{"line":21,"column":null}},"5":{"start":{"line":10,"column":13},"end":{"line":10,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":2},"end":{"line":12,"column":22}},"loc":{"start":{"line":12,"column":38},"end":{"line":12,"column":43}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":12}},"loc":{"start":{"line":14,"column":15},"end":{"line":20,"column":3}}}},"branchMap":{},"s":{"0":2,"1":2,"2":2,"3":2,"4":2,"5":2},"f":{"0":2,"1":2},"b":{}},"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/buffet-booking/buffet-booking.ts":{"path":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/buffet-booking/buffet-booking.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":13}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{}},"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/app.component.ts":{"path":"/home/user/Desktop/user_repo/Certification_Assessment/Frontend/src/app/app.component.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":42}},"1":{"start":{"line":8,"column":0},"end":{"line":14,"column":null}},"2":{"start":{"line":8,"column":13},"end":{"line":14,"column":null}},"3":{"start":{"line":8,"column":13},"end":{"line":8,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":18}},"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":19}}}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1},"f":{"0":1},"b":{}}}}